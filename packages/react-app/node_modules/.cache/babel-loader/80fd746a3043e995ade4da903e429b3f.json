{"ast":null,"code":"var _jsxFileName = \"/Users/daddio/Documents/Scaffold-Eth/SpeedRunEthereum/Challenge3/challenge-5-dex/packages/react-app/src/components/AddressInput.jsx\",\n    _s = $RefreshSig$();\n\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input, message, Spin } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\"; // probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n  Displays an address input with QR scan option\n  ~ How can I use? ~\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n  ~ Features ~\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddressInput(props) {\n  _s();\n\n  const [value, setValue] = useState(props.address);\n  const [scan, setScan] = useState(false);\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: 4,\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      setScan(!scan);\n    },\n    children: [/*#__PURE__*/_jsxDEV(Badge, {\n      count: /*#__PURE__*/_jsxDEV(CameraOutlined, {\n        style: {\n          color: \"#000000\",\n          fontSize: 9\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(QrcodeOutlined, {\n        style: {\n          color: \"#000000\",\n          fontSize: 18\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), \" \", \"Scan\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n\n  const {\n    ensProvider,\n    onChange\n  } = props;\n  const updateAddress = useCallback(async newValue => {\n    if (typeof newValue !== \"undefined\") {\n      console.log(\"SCAN\", newValue);\n      /*console.log(\"ðŸ”‘ Incoming Private Key...\");\n      rawPK = incomingPK;\n      burnerConfig.privateKey = rawPK;\n      window.history.pushState({}, \"\", \"/\");\n      const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n      if (currentPrivateKey && currentPrivateKey !== rawPK) {\n        window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n      }\n      window.localStorage.setItem(\"metaPrivateKey\", rawPK);*/\n\n      if (newValue && newValue.indexOf && newValue.indexOf(\"wc:\") === 0) {\n        props.walletConnect(newValue);\n      } else {\n        let address = newValue;\n        setValue(address);\n\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n\n            if (possibleAddress) {\n              address = possibleAddress;\n            } // eslint-disable-next-line no-empty\n\n          } catch (e) {}\n        }\n\n        setValue(address);\n\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    }\n  }, [ensProvider, onChange]);\n  const scanner = scan ? /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      zIndex: 256,\n      position: \"absolute\",\n      left: \"-25%\",\n      top: \"-150%\",\n      width: \"150%\",\n      backgroundColor: \"#333333\"\n    },\n    onClick: () => {\n      setScan(false);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: 16,\n        position: \"absolute\",\n        width: \"100%\",\n        textAlign: \"center\",\n        top: \"25%\",\n        color: \"#FFFFFF\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), \" connecting to camera...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(QrReader, {\n      delay: 250,\n      resolution: 1200,\n      onError: e => {\n        console.log(\"SCAN ERROR\", e);\n        setScan(false);\n        message.error(\"Camera Error: \" + e.toString());\n      },\n      onScan: newValue => {\n        if (newValue) {\n          console.log(\"SCAN VALUE\", newValue);\n\n          if (newValue && newValue.length == 66 && newValue.indexOf(\"0x\") === 0) {\n            console.log(\"This might be a PK...\", newValue);\n            setTimeout(() => {\n              console.log(\"opening...\");\n              let a = document.createElement(\"a\");\n              document.body.appendChild(a);\n              a.style = \"display: none\"; //a.href = \"https://punkwallet.io/pk#\"+newValue;\n\n              a.click();\n              document.body.removeChild(a);\n            }, 250);\n            setScan(false);\n            updateAddress();\n          } else if (newValue && newValue.indexOf && newValue.indexOf(\"http\") === 0) {\n            console.log(\"this is a link, following...\");\n            setTimeout(() => {\n              console.log(\"opening...\");\n              let a = document.createElement(\"a\");\n              document.body.appendChild(a);\n              a.style = \"display: none\";\n              a.href = newValue;\n              a.click();\n              document.body.removeChild(a);\n            }, 250);\n            setScan(false);\n            updateAddress();\n          } else {\n            let possibleNewValue = newValue;\n            possibleNewValue = possibleNewValue.replace(\"ethereum:\", \"\");\n            possibleNewValue = possibleNewValue.replace(\"eth:\", \"\");\n            console.log(\"possibleNewValue\", possibleNewValue);\n\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }\n      },\n      style: {\n        width: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this) : \"\";\n  const part1 = currentValue && currentValue.substr && currentValue.substr(2, 20);\n  const part2 = currentValue && currentValue.substr && currentValue.substr(22);\n  const x = parseInt(part1, 16) % 100;\n  const y = parseInt(part2, 16) % 100;\n  props.hoistScanner(() => {\n    setScan(!scan);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [scanner, /*#__PURE__*/_jsxDEV(Input, {\n      disabled: props.disabled,\n      id: \"0xAddress\" // name it something other than address for auto fill doxxing\n      ,\n      name: \"0xAddress\" // name it something other than address for auto fill doxxing\n      ,\n      autoComplete: \"off\",\n      autoFocus: props.autoFocus,\n      placeholder: props.placeholder ? props.placeholder : \"address\",\n      value: ens || currentValue,\n      addonAfter: scannerButton,\n      onChange: e => {\n        updateAddress(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddressInput, \"SRoKutGOxeiVhFg7lwzqdO2rJYY=\", false, function () {\n  return [useLookupAddress];\n});\n\n_c = AddressInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressInput\");","map":{"version":3,"sources":["/Users/daddio/Documents/Scaffold-Eth/SpeedRunEthereum/Challenge3/challenge-5-dex/packages/react-app/src/components/AddressInput.jsx"],"names":["CameraOutlined","QrcodeOutlined","Badge","Input","message","Spin","useLookupAddress","React","useCallback","useState","QrReader","Blockie","AddressInput","props","value","setValue","address","scan","setScan","currentValue","ens","ensProvider","scannerButton","marginTop","cursor","color","fontSize","onChange","updateAddress","newValue","console","log","indexOf","walletConnect","possibleAddress","resolveName","e","scanner","zIndex","position","left","top","width","backgroundColor","textAlign","error","toString","length","setTimeout","a","document","createElement","body","appendChild","style","click","removeChild","href","possibleNewValue","replace","substr","lastIndexOf","part1","part2","x","parseInt","y","hoistScanner","disabled","autoFocus","placeholder","target"],"mappings":"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","sourcesContent":["import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input, message, Spin } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\n\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n  Displays an address input with QR scan option\n  ~ How can I use? ~\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n  ~ Features ~\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.address);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ color: \"#000000\", fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ color: \"#000000\", fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const { ensProvider, onChange } = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n\n        console.log(\"SCAN\",newValue)\n\n        /*console.log(\"ðŸ”‘ Incoming Private Key...\");\n        rawPK = incomingPK;\n        burnerConfig.privateKey = rawPK;\n        window.history.pushState({}, \"\", \"/\");\n        const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n        if (currentPrivateKey && currentPrivateKey !== rawPK) {\n          window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n        }\n        window.localStorage.setItem(\"metaPrivateKey\", rawPK);*/\n        if(newValue && newValue.indexOf && newValue.indexOf(\"wc:\")===0){\n          props.walletConnect(newValue)\n        }else{\n          let address = newValue;\n          setValue(address);\n          if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n            try {\n              const possibleAddress = await ensProvider.resolveName(address);\n              if (possibleAddress) {\n                address = possibleAddress;\n              }\n              // eslint-disable-next-line no-empty\n            } catch (e) {}\n          }\n          setValue(address);\n          if (typeof onChange === \"function\") {\n            onChange(address);\n          }\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: \"-25%\",\n        top: \"-150%\",\n        width: \"150%\",\n        backgroundColor: \"#333333\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <div\n        style={{ fontSize: 16, position: \"absolute\", width: \"100%\", textAlign: \"center\", top: \"25%\", color: \"#FFFFFF\" }}\n      >\n        <Spin /> connecting to camera...\n      </div>\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n          message.error(\"Camera Error: \" + e.toString());\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\",newValue);\n\n            if(newValue && newValue.length==66 && newValue.indexOf(\"0x\")===0){\n              console.log(\"This might be a PK...\",newValue)\n              setTimeout(()=>{\n                console.log(\"opening...\")\n                let a = document.createElement(\"a\");\n                document.body.appendChild(a);\n                a.style = \"display: none\";\n                //a.href = \"https://punkwallet.io/pk#\"+newValue;\n                a.click();\n                document.body.removeChild(a);\n              },250)\n              setScan(false);\n              updateAddress();\n            }else if(newValue && newValue.indexOf && newValue.indexOf(\"http\")===0){\n              console.log(\"this is a link, following...\")\n              setTimeout(()=>{\n                console.log(\"opening...\")\n                let a = document.createElement(\"a\");\n                document.body.appendChild(a);\n                a.style = \"display: none\";\n                a.href = newValue;\n                a.click();\n                document.body.removeChild(a);\n              },250)\n\n              setScan(false);\n              updateAddress();\n            }else{\n              let possibleNewValue = newValue;\n              possibleNewValue = possibleNewValue.replace(\"ethereum:\", \"\");\n              possibleNewValue = possibleNewValue.replace(\"eth:\", \"\");\n              console.log(\"possibleNewValue\",possibleNewValue)\n              if (possibleNewValue.indexOf(\"/\") >= 0) {\n                possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                console.log(\"CLEANED VALUE\", possibleNewValue);\n              }\n              setScan(false);\n              updateAddress(possibleNewValue);\n            }\n\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  const part1 = currentValue && currentValue.substr && currentValue.substr(2, 20);\n  const part2 = currentValue && currentValue.substr && currentValue.substr(22);\n  const x = parseInt(part1, 16) % 100;\n  const y = parseInt(part2, 16) % 100;\n\n  props.hoistScanner(() => {\n    setScan(!scan);\n  });\n\n  return (\n    <div>\n      {scanner}\n\n      <Input\n        disabled={props.disabled}\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        value={ens || currentValue}\n        addonAfter={scannerButton}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}